# yaml-language-server: =https://json.schemastore.org/lefthook.json
output:
  # - summary # Print summary block (successful and failed steps)
  # - empty_summary # Print summary heading when there are no steps to run
  - failure # Print failed steps printing
# - skips # Print "skip" (i.e. no files matched)
assert_lefthook_installed: true
pre-commit:
  commands:
    typecheck:
      glob: "**/*.ts"
      run: bunx tsgo --noEmit
    lint:
      glob: "*.{js,ts,cjs,mjs,d.cts,d.mts,md,html}"
      run: bunx eslint --cache --fix {staged_files}
      stage_fixed: true
    format:
      glob: "*.{json,jsonc,yaml,yml,md,js,html,ts}"
      run: bunx prettier --cache --no-error-on-unmatched-pattern --write {staged_files}
      stage_fixed: true
    taplo:
      glob: "**/*.toml"
      run: bunx taplo format {staged_files}
      stage_fixed: true
    yamllint:
      glob: "*.{yml,yaml}"
      run: uvx yamllint {staged_files}
    ruff-format:
      glob: "**/*.py"
      run: uv tool run ruff format --config pyproject.toml {staged_files}
      stage_fixed: true
    codecov:
      glob: ".codecov.yml"
      run: curl --fail --data-binary @.codecov.yml https://codecov.io/validate
    renovate:
      glob: "renovate.json"
      run: npx -y --package renovate renovate-config-validator renovate.json
    actionlint:
      glob: ".github/workflows/*.{yaml,yml}"
      run: actionlint {staged_files}
    commitlint-config:
      glob: ".commitlintrc.yaml"
      run: uvx check-jsonschema --schemafile https://json.schemastore.org/commitlintrc.json .commitlintrc.yaml

commit-msg:
  commands:
    "lint commit message":
      run: bunx commitlint --edit {1}
    "check spelling":
      run: uvx typos {1}

# post-checkout:
#   commands:
#     python-dependencies:
#       glob: "uv.lock"
#       run: uv sync

post-merge:
  files: "git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD"
  commands:
    python-dependencies:
      glob: uv.lock
      run: uv sync
    delete-merged-branches:
      run: git branch --merged | grep -Ev '\*|master|main|dev|develop|development|stag|staging|prod|production' | xargs git branch -d; git fetch --prune;
